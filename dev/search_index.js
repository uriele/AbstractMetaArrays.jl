var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = AbstractMetaArrays","category":"page"},{"location":"#AbstractMetaArrays","page":"Home","title":"AbstractMetaArrays","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AbstractMetaArrays.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [AbstractMetaArrays]","category":"page"},{"location":"#AbstractMetaArrays.AbstractMetaArrays","page":"Home","title":"AbstractMetaArrays.AbstractMetaArrays","text":"module AbstractMetaArrays\n\nA Julia package providing an abstract interface and utilities for arrays with attached metadata and optional column metadata.\n\nOverview\n\nAbstractMetaArrays defines the abstract type AbstractMetaArray, which extends the standard AbstractArray interface to support:\n\nMetadata: Arbitrary key-value pairs describing the array as a whole.\nColumn Metadata: Metadata associated with individual columns or components (optional).\n\nConcrete implementations (such as SimpleMetaArray) inherit from AbstractMetaArray and provide storage and trait-based control over metadata support.\n\nMain Types\n\nAbstractMetaArray: Abstract type for meta arrays.\nAbstractMetaVector, AbstractMetaMatrix: Aliases for 1D and 2D meta arrays.\nSimpleMetaArray: A concrete implementation with full metadata and column metadata support.\nMetaType: Alias for the metadata dictionary type.\n\nTraits\n\nColMetadataTrait: Indicates if column metadata is supported.\nColMetadataStyle: Controls read/write access to column metadata.\nMetadataStyle: Controls read/write access to array metadata.\n\nUtilities\n\ncreate_metaarray: Helper for constructing metadata and column metadata dictionaries for new arrays.\n\nIntegration\n\nThe package integrates with DataAPI.jl for a standard metadata interface, and provides extensions for compatibility with packages like StaticArrays and StructArrays.\n\nExample\n\nusing AbstractMetaArrays, StaticArrays\n\narr = SimpleMetaArray(SVector{3}(1,2,3), Dict(\"description\" => (\"test\", :entry)), Dict(:x => Dict(\"unit\" => (\"m\", :default))))\ndesc = metadata(arr, \"description\")  # returns \"test\"\n\nSee the documentation for details on implementing custom meta arrays and extending metadata support.\n\n\n\n\n\n","category":"module"},{"location":"#AbstractMetaArrays.AbstractMetaArray","page":"Home","title":"AbstractMetaArrays.AbstractMetaArray","text":"AbstractMetaArray{T,N,A<:AbstractArray{T,N}} <: AbstractArray{T,N}\n\nAbstractMetaArray is an abstract type that represents a meta array with metadata and optional column metadata.   It is a subtype of AbstractArray and provides a common interface for all meta arrays. All the concrete implementations of   AbstractMetaArray should inherit from this type.   The type parameters are:\n\nT: The element type of the array.\nN: The number of dimensions of the array.\nA: The concrete type of the array. It should be a subtype of AbstractArray{T,N}.\n\nThe concrete implementations of AbstractMetaArray should define the following fields:\n\n_data: The underlying data of the array. It should be a subtype of AbstractArray{T,N}.\n_metadata: The metadata of the array. It should be a dictionary with string keys and values of type Tuple{Any,Symbol}.\n_colmetadata: The column metadata of the array. It should be a dictionary with symbol keys and values of type MetaType.\n\nThe concrete implementations of AbstractMetaArray should also define the following traits:\n\nColMetadataTrait: Defines if the meta array supports column metadata or not. It should be a subtype of ColMetadataTrait. By default, it is NoColMetadata().\nColMetadataStyle: Defines the access to the column metadata (reading, writing, both, or none). It should be a subtype of ColMetadataStyle.\nMetadataTrait: Defines if the meta array supports metadata or not. It should be a subtype of MetadataTrait. By default, it is NoMetadata().\n\nFor simplicity a non exported function create_metaarray is defined to create the metadata and colmetadata for the meta array.   It is used in the constructor of the meta array.\n\nSee also SimpleMetaArray for a concrete implementation of the AbstractMetaArray.     create_metaarray for a helper function to create the metadata and colmetadata for the meta array.     ColMetadataTrait for the trait that defines if the meta array supports column metadata or not.     ColMetadataStyle for the trait that defines the access to the column metadata.     MetadataStyle for the trait that defines the access to the metadata.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractMetaArrays.AbstractMetaMatrix","page":"Home","title":"AbstractMetaArrays.AbstractMetaMatrix","text":"AbstractMetaMatrix{T}\n\nAlias for AbstractMetaArray{T,2}. Represents a 2-dimensional meta array.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractMetaArrays.AbstractMetaVector","page":"Home","title":"AbstractMetaArrays.AbstractMetaVector","text":"AbstractMetaVector{T}\n\nAlias for AbstractMetaArray{T,1}. Represents a 1-dimensional meta array.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractMetaArrays.ColMetadataStyle","page":"Home","title":"AbstractMetaArrays.ColMetadataStyle","text":"AbstractMetaArrays.ColMetadataStyle(x::Type)   AbstractMetaArrays.ColMetadataStyle(x)\n\nA trait function used to determine the column metadata support of a type or an instance x. This is used by the implementation of DataAPI.colmetadatasupport implemented by this module, to define reading and writing permissions for column metadata. Default behavior is to return ReadWriteColMetadata().\n\nNote: If the ColMetadataTrait is NoColMetadata, this function will be ignored.\n\nArguments\n\nx::Type: A type to check for column metadata support.\nx: An instance to check for column metadata support.\n\nReturn\n\nReadWriteColMetadata(): Indicates that the type or instance has read and write column metadata support.\nReadOnlyColMetadata(): Indicates that the type or instance has read-only column metadata support.\nWriteOnlyColMetadata(): Indicates that the type or instance has write-only column metadata support.\nPrivateColMetadata(): Indicates that the type or instance does not have column metadata support.\n\nSee also: ColMetadataTrait for more information on column metadata support.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractMetaArrays.ColMetadataTrait","page":"Home","title":"AbstractMetaArrays.ColMetadataTrait","text":"AbstractMetaArrays.ColMetadataTrait(x::Type)   AbstractMetaArrays.ColMetadataTrait(x)\n\nA trait function used to determine if a type or an instance x has column metadata associated with it. This can be used to dispatch on types or instances that support column metadata. Default behavior is to return NoColMetadata().\n\nArguments\n\nx::Type: A type to check for column metadata support.\nx: An instance to check for column metadata support.\n\nReturn\n\nHasColMetadata(): Indicates that the type or instance has column metadata support.\nNoColMetadata(): Indicates that the type or instance does not have column metadata support.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractMetaArrays.MetaType","page":"Home","title":"AbstractMetaArrays.MetaType","text":"MetaType<: Dict{<:AbstractString,Tuple{Any,Symbol}}\n\nAlias for the metadata type. It is a dictionary with string keys and values of type Tuple{Any,Symbol}.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractMetaArrays.MetadataStyle","page":"Home","title":"AbstractMetaArrays.MetadataStyle","text":"AbstractMetaArrays.MetadataStyle(x::Type)   AbstractMetaArrays.MetadataStyle(x)\n\nA trait function used to determine the metadata support of a type or an instance x. This is used by the implementation of DataAPI.metadatasupport implemented by this module, to define reading and writing permissions for metadata. Default behavior is to return ReadWriteMetadata().\n\nArguments\n\nx::Type: A type to check for metadata support.\nx: An instance to check for metadata support.\n\nReturn\n\nReadWriteMetadata(): Indicates that the type or instance has read and write metadata support.\nReadOnlyMetadata(): Indicates that the type or instance has read-only metadata support.\nWriteOnlyMetadata(): Indicates that the type or instance has write-only metadata support.\nPrivateMetadata(): Indicates that the type or instance does not have metadata support.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractMetaArrays.SimpleMetaArray","page":"Home","title":"AbstractMetaArrays.SimpleMetaArray","text":"SimpleMetaArray{T,N,A<:AbstractArray{T,N}} <: AbstractMetaArray{T,N,A<:AbstractArray{T,N}}\n\nConcrete implementation of AbstractMetaArray for a simple array with metadata. This is a concrete type that can be used to create instances of AbstractMetaArray. It has metadata and colmetadata fields that are dictionaries with string keys and values of type Tuple{Any,Symbol}.\n\nIt uses the following traits:\n\nAbstractMetaArrays.ColMetadataTrait(::Type{<:SimpleMetaArray}) = HasColMetadata()   AbstractMetaArrays.ColMetadataStyle(::Type{<:SimpleMetaArray}) = ReadWriteColMetadata()   AbstractMetaArrays.MetadataStyle(::Type{<:SimpleMetaArray}) = ReadWriteMetadata()\n\nSee also AbstractMetaArray for more information on the abstract type and its methods.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractMetaArrays.SimpleMetaArray-Union{Tuple{A}, Tuple{N}, Tuple{T}, Tuple{A, Union{Nothing, Dict}}, Tuple{A, Union{Nothing, Dict}, Union{Nothing, NTuple{N, Union{Nothing, Dict}}, Dict}}} where {T, N, A<:AbstractArray{T, N}}","page":"Home","title":"AbstractMetaArrays.SimpleMetaArray","text":"SimpleMetaArray{T,N}(data::A, metadata::DictOrNothing=nothing, colmetadata::Union{NTuple{N,DictOrNothing},DictOrNothing}=nothing) where {T,N,A<:AbstractArray{T,N}} =\nSimpleMetaArray(data, metadata, colmetadata)\n\nConstruct a SimpleMetaArray with the given data, metadata and colmetadata.\n\nExample\n\njulia> using StaticArrays\njulia> s=SimpleMetaArray(SVector{3}(1,1,1), Dict(\"description\" => (\"test array\", :entry)),\n              Dict(\"unit\" => (\"m\", :default)))\n3-element SimpleMetaArray{Int64, 1} with indices SOneTo(3):\n 1\n 1\n 1\n\njulia> metadata(s)\nDict{String, String} with 1 entry:\n  \"description\" => \"test array\"\n\njulia> colmetadata(s)\nDict{Symbol, Dict{String, String}} with 3 entries:\n  :y => Dict(\"unit\"=>\"m\")\n  :z => Dict(\"unit\"=>\"m\")\n  :x => Dict(\"unit\"=>\"m\")\n\n\n\n\n\n","category":"method"},{"location":"#AbstractMetaArrays.SimpleMetaArray-Union{Tuple{N}, Tuple{Type, NTuple{N, Int64}}, Tuple{Type, NTuple{N, Int64}, Union{Nothing, Dict}}, Tuple{Type, NTuple{N, Int64}, Union{Nothing, Dict}, Union{Nothing, NTuple{N, Union{Nothing, Dict}}, Dict}}} where N","page":"Home","title":"AbstractMetaArrays.SimpleMetaArray","text":"SimpleMetaArray(T::Type, dims::Dims{N}, metadata::DictOrNothing=nothing, colmetadata::Union{NTuple{N,DictOrNothing},DictOrNothing}=nothing) where N\nSimpleMetaArray(A::Type{<:AbstractArray{T,N}}, dims::Dims{N}, metadata::DictOrNothing=nothing, colmetadata::Union{NTuple{N,DictOrNothing},DictOrNothing}=nothing) where {T,N}\n\nConstruct a SimpleMetaArray with the given type, dimensions, metadata and colmetadata. The type can be a concrete type or a comcrete subtype of AbstractArray.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractMetaArrays.create_metaarray-Union{Tuple{MA}, Tuple{MA, Any}, Tuple{MA, Any, Union{Nothing, Dict}}, Tuple{MA, Any, Union{Nothing, Dict}, Any}} where MA<:Type","page":"Home","title":"AbstractMetaArrays.create_metaarray","text":"AbstractMetaArrays.create_metaarray(::Type{MA}, A::AbstractArray, meta=nothing, colmeta=nothing) where {MA<:AbstractMetaArray}\n\nhelper function to the metadata and colmetadata constructors given a concrete implemetation of the AbstractMetaArray and of the AbstractArray it contains. The function returns a tuple of metadata and colmetadata. The metadata is a dictionary with string keys and values of type Tuple{Any,Symbol}. The colmetadata is a dictionary with symbol keys and values of type MetaType if the MetaArray has column metadata, otherwise it is return nothing.\n\nNote: The format of the metatada is given bt the MetaType type as a dictionary with string keys and values of type Tuple{Any,Symbol}. If the dictionary provided is in the value in not in the form of a Tuple{Any,Symbol} it will be converted to this format by appending the :default key to the value.\n\nArguments\n\nMA: Type of the metaarray.\nA: Abstract array to be wrapped.\nmeta: Default metadata to be used if not provided. It can be a Dict or Nothing.\ncolmeta: Default column metadata to be used if not provided. It can be a Dict or Nothing or a Tuple of Dicts.\n\nReturns\n\nA tuple containing the metadata and colmetadata.\n\nExample\n\n```jldoctest   julia> using StaticArrays   julia> create_metaarray(SimpleMetaArray, SVector{3}(1,1,1), Dict(\"description\" => (\"test array\", :entry)),           Dict(\"unit\" => (\"m\", :default)))   (Dict(\"description\" => (\"test array\", :entry)),    Dict(:x => Dict(\"unit\" => (\"m\", :default)), :y => Dict(\"unit\" => (\"m\", :default)), :z => Dict(\"unit\" => (\"m\", :default))))\n\njulia>create_metaarray(SimpleMetaArray, SVector{3}(1,1,1),Dict(\"description\" => (\"test array\", :entry)),           (Dict(\"unit\" => (\"m\", :default)),            Dict(\"unit\" => (\"km\", :default)),            Dict(\"unit\" => (\"cm\", :default)))) (Dict(\"description\" => (\"test array\", :entry)),  Dict(:x => Dict(\"unit\" => (\"m\", :default))),       :y => Dict(\"unit\" => (\"km\", :default)),       :z => Dict(\"unit\" => (\"cm\", :default)))   ```\n\n\n\n\n\n","category":"method"}]
}
